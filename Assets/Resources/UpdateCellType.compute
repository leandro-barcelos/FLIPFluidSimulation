#define NUM_THREADS 8

#pragma enable_d3d11_debug_symbols

#define FLUID 0
#define AIR   1
#define SOLID 2

// Buffers
RWStructuredBuffer<int> _CellType;
StructuredBuffer<float> _S;
StructuredBuffer<float3> _ParticlePos;

// Parameters
int _FNumCells;
int _NumParticles;
float3 _FDimensions;
float3 _SimOrigin;
float _FInvSpacing;

#pragma kernel BasedOnS

[numthreads(NUM_THREADS, 1, 1)]
void BasedOnS(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _FNumCells)
    {
        return;
    }

    int index = id.x;

    _CellType[index] = _S[index] == 0.0 ? SOLID : AIR;
}

#pragma kernel BasedOnParticles

[numthreads(NUM_THREADS, 1, 1)]
void BasedOnParticles(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumParticles)
    {
        return;
    }

    int index = id.x;

    float3 pos = _ParticlePos[index];

    int xi = clamp(floor((pos.x - _SimOrigin.x) * _FInvSpacing), 0, _FDimensions.x - 1);
    int yi = clamp(floor((pos.y - _SimOrigin.y) * _FInvSpacing), 0, _FDimensions.y - 1);
    int zi = clamp(floor((pos.z - _SimOrigin.z) * _FInvSpacing), 0, _FDimensions.z - 1);

    int cellNr = (zi * _FDimensions.x * _FDimensions.y) + (yi * _FDimensions.x) + xi;

    if (_CellType[cellNr] == AIR)
        _CellType[cellNr] = FLUID;
}