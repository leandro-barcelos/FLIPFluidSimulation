#define NUM_THREADS 8

#pragma enable_d3d11_debug_symbols

// Buffers
RWStructuredBuffer<float3> _ParticlePos;
RWStructuredBuffer<int> _NumParticlesInCell;
RWStructuredBuffer<int> _FirstCellParticle;
RWStructuredBuffer<int> _CellParticlesIds;
RWStructuredBuffer<float3> _ParticleColor;

// Parameters
int _NumParticles;
int _PNumCells;
float _MinDist;
float _MinDist2;
float3 _PDimensions;
float3 _SimOrigin;
float _PInvSpacing;
float _ColorDiffusionCoeff;

// Kernel
#pragma kernel CountParticlesInCell

[numthreads(NUM_THREADS, 1, 1)]
void CountParticlesInCell(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumParticles)
    {
        return;
    }

    int index = id.x;

    float3 position = _ParticlePos[index];

    int xi = clamp(floor((position.x - _SimOrigin.x) * _PInvSpacing), 0, _PDimensions.x - 1);
    int yi = clamp(floor((position.y - _SimOrigin.y) * _PInvSpacing), 0, _PDimensions.y - 1);
    int zi = clamp(floor((position.z - _SimOrigin.z) * _PInvSpacing), 0, _PDimensions.z - 1);

    int cellNr = (zi * _PDimensions.x * _PDimensions.y) + (yi * _PDimensions.x) + xi;

    InterlockedAdd(_NumParticlesInCell[cellNr], 1);
}

#pragma kernel PartialSums

[numthreads(NUM_THREADS, 1, 1)]
void PartialSums(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _PNumCells)
    {
        return;
    }

    int index = id.x;

    int sum = 0;

    for (int i = 0; i <= index; i++)
    {
        sum += _NumParticlesInCell[i];
    }

    _FirstCellParticle[index] = sum;

    if ((int)id.x == _PNumCells - 1)
        _FirstCellParticle[index + 1] = sum;
}

#pragma kernel FillParticlesIntoCells

[numthreads(NUM_THREADS, 1, 1)]
void FillParticlesIntoCells(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumParticles)
    {
        return;
    }

    int index = id.x;

    float3 position = _ParticlePos[index];

    int xi = clamp(floor((position.x - _SimOrigin.x) * _PInvSpacing), 0, _PDimensions.x - 1);
    int yi = clamp(floor((position.y - _SimOrigin.y) * _PInvSpacing), 0, _PDimensions.y - 1);
    int zi = clamp(floor((position.z - _SimOrigin.z) * _PInvSpacing), 0, _PDimensions.z - 1);

    int cellNr = (zi * _PDimensions.x * _PDimensions.y) + (yi * _PDimensions.x) + xi;

    InterlockedAdd(_FirstCellParticle[cellNr], -1);

    _CellParticlesIds[_FirstCellParticle[cellNr]] = index;
}

#pragma kernel CSMain

[numthreads(NUM_THREADS, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumParticles)
    {
        return;
    }

    int index = id.x;

    float3 p = _ParticlePos[index];
    float3 pi = floor((p - _SimOrigin) * _PInvSpacing);

    float x0 = max(pi.x - 1, 0);
    float x1 = min(pi.x + 1, _PDimensions.x - 1);
    float y0 = max(pi.y - 1, 0);
    float y1 = min(pi.y + 1, _PDimensions.y - 1);
    float z0 = max(pi.z - 1, 0);
    float z1 = min(pi.z + 1, _PDimensions.z - 1);

    for (int xi = x0; xi <= x1; xi++)
    {
        for (int yi = y0; yi <= y1; yi++)
        {
            for (int zi = z0; zi <= z1; zi++)
            {
                int cellNr = (zi * _PDimensions.x * _PDimensions.y) + (yi * _PDimensions.x) + xi;
                int first = _FirstCellParticle[cellNr];
                int last = _FirstCellParticle[cellNr + 1];
                for (int j = first; j < last; j++)
                {
                    int id = _CellParticlesIds[j];
                    if (id == index) continue;
                    float3 q = _ParticlePos[id];
                    float3 v = q - p;
                    float d2 = dot(v, v);
                    if (d2 > _MinDist2 || d2 == 0.0)
                        continue;
                    float d = sqrt(d2);
                    float s = (0.5 * (_MinDist - d)) / d;
                    v *= s;

                    // TODO: Fix racing conditions here

                    _ParticlePos[index] -= v;
                    _ParticlePos[id] -= v;

                    float3 color0 = _ParticleColor[index];
                    float3 color1 = _ParticleColor[id];
                    float3 color = (color0 + color1) * 0.5;

                    _ParticleColor[index] = color1 + (color - color1) * _ColorDiffusionCoeff;
                    _ParticleColor[id] = color1 + (color - color1) * _ColorDiffusionCoeff;
                }
            }
        }
    }
}