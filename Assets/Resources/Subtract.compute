#define NUM_THREADS 8

#pragma enable_d3d11_debug_symbols

// Buffers
Texture3D<float4> _VelocityTexture;
Texture3D<float> _PressureTexture;
SamplerState sampler_PressureTexture;
RWTexture3D<float4> _TempVelocityTexture;

// Parameters
float3 _GridResolution;
float3 _InvGridResolution;

// Helper functions

// Kernel
#pragma kernel CSMain

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if ((int)id.x >= _GridResolution.x || (int)id.y >= _GridResolution.y || (int)id.z >= _GridResolution.z) return;

    float left = _PressureTexture.SampleLevel(sampler_PressureTexture, (id + float3(-1.0, 0.0, 0.0) + 0.5) * _InvGridResolution, 0);
    float right = _PressureTexture.SampleLevel(sampler_PressureTexture, (id + 0.5) * _InvGridResolution, 0);
    float bottom = _PressureTexture.SampleLevel(sampler_PressureTexture, (id + float3(0.0, -1.0, 0.0) + 0.5) * _InvGridResolution, 0);
    float top = _PressureTexture.SampleLevel(sampler_PressureTexture, (id + 0.5) * _InvGridResolution, 0);
    float back = _PressureTexture.SampleLevel(sampler_PressureTexture, (id + float3(0.0, 0.0, -1.0) + 0.5) * _InvGridResolution, 0);
    float front = _PressureTexture.SampleLevel(sampler_PressureTexture, (id + 0.5) * _InvGridResolution, 0);

    float3 gradient = float3(right - left, top - bottom, front - back);

    float3 currentVelocity = _VelocityTexture[id].xyz;

    float3 newVelocity = currentVelocity - gradient;

    _TempVelocityTexture[id] = float4(newVelocity, 0.0);
}