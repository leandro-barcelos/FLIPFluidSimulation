#define NUM_THREADS 8

#pragma enable_d3d11_debug_symbols

struct MeshProperties {
    float4x4 mat;
    float4 color;
};

// Buffers
Texture3D<int> _MarkerTexture;
Texture2D<float4> _ParticlePositionTexture;
RWStructuredBuffer<MeshProperties> _Properties;

// Parameters
float _ParticleRadius;
float2 _ParticleResolution;
float3 _GridResolution;
float3 _GridSize;

// Kernel
#pragma kernel Particles

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void Particles(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _ParticleResolution.x || (int)id.y >= _ParticleResolution.y) return;

    float3 pos = _ParticlePositionTexture[id.xy].xyz;

    int index = id.x + id.y * _ParticleResolution.x;

    if (pos.x > 40 || pos.y > 20 || pos.z > 20)
        _Properties[index].color = float4(0, 0, 0, 1);

    _Properties[index].mat = float4x4(
        float4(_ParticleRadius * 2.0, 0, 0, pos.x - _GridSize.x * 0.5),
        float4(0, _ParticleRadius * 2.0, 0, pos.y - _GridSize.y * 0.5),
        float4(0, 0, _ParticleRadius * 2.0, pos.z - _GridSize.z * 0.5),
        float4(0, 0, 0, 1)
    );
}

// Kernel
#pragma kernel Cells

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void Cells(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _GridResolution.x || (int)id.y >= _GridResolution.y || (int)id.z >= _GridResolution.z) return;

    int mark = _MarkerTexture[id];

    int index = id.x * _GridResolution.y * _GridResolution.z + id.y * _GridResolution.z + id.z;

    if (mark == 1)
    {
        _Properties[index].color = float4(0, 0, 1, 0.7);
        return;
    }

    if (id.x == 0 || (float)id.x == _GridResolution.x - 1 || id.y == 0 || (float)id.y == _GridResolution.y - 1 || id.z == 0 || (float)id.z == _GridResolution.z - 1)
    {
        _Properties[index].color = float4(1, 1, 1, 0.01);
        return;
    }
        
    _Properties[index].color = 0.0;

}