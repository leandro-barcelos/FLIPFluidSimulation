#define NUM_THREADS 8

#pragma kernel CSMain

// Textures
Texture2D<float4> _ParticlePositionTexture;
Texture2D<float4> _ParticleVelocityTexture;

RWTexture3D<uint> _WeightTextureX;
RWTexture3D<uint> _WeightTextureY;
RWTexture3D<uint> _WeightTextureZ;
RWTexture3D<uint> _WeightTextureScalar;

RWTexture3D<uint> _TempVelocityTextureX;
RWTexture3D<uint> _TempVelocityTextureY;
RWTexture3D<uint> _TempVelocityTextureZ;

// Constants
float3 _GridSize;
float3 _GridResolution;
float2 _ParticleResolution;
int3 _Offset;

// Helper functions
float h(float r) {
    return (r >= 0.0 && r <= 1.0) ? (1.0 - r) : ((r >= -1.0 && r <= 0.0) ? (1.0 + r) : 0.0);
}

float k(float3 v) {
    return h(v.x) * h(v.y) * h(v.z);
}

void atomicAdd(RWTexture3D<uint> _texture, uint3 index, float value) {
    uint compareValue = _texture[index];
    uint outValue = 0;

    uint i_val = asuint(value + asfloat(_texture[index]));

    [allow_uav_condition]
    while (true)
    {
        InterlockedCompareExchange(_texture[index], compareValue, i_val, outValue);
        if (outValue == compareValue)
            break;

        compareValue = outValue;
        i_val = asuint(value + asfloat(outValue));
    }
}

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if ((int)id.x >= _ParticleResolution.x || (int)id.y >= _ParticleResolution.y) return;

    float3 particlePos = _ParticlePositionTexture[id.xy].xyz;
    float3 particleVel = _ParticleVelocityTexture[id.xy].xyz;

    float3 gridPos = (particlePos / _GridSize) * _GridResolution;

    // Compute grid cell and position
    float3 gridCell = floor(gridPos);
    gridCell += _Offset;

    if (any(gridCell >= _GridResolution) || any(gridCell < 0)) 
        return;

    float3 xPosition = gridCell + float3(0.0, 0.5, 0.5);
    float xWeight = k(gridPos - xPosition);

    float3 yPosition = gridCell + float3(0.5, 0.0, 0.5);
    float yWeight = k(gridPos - yPosition);

    float3 zPosition = gridCell + float3(0.5, 0.5, 0.0);
    float zWeight = k(gridPos - zPosition);

    float3 scalarPosition = gridCell + float3(0.5, 0.5, 0.5);
    float scalarWeight = k(gridPos - scalarPosition);

    atomicAdd(_WeightTextureX, gridCell, xWeight);
    atomicAdd(_WeightTextureY, gridCell, yWeight);
    atomicAdd(_WeightTextureZ, gridCell, zWeight);
    atomicAdd(_WeightTextureScalar, gridCell, scalarWeight);

    atomicAdd(_TempVelocityTextureX, gridCell, particleVel.x * xWeight);
    atomicAdd(_TempVelocityTextureY, gridCell, particleVel.y * yWeight);
    atomicAdd(_TempVelocityTextureZ, gridCell, particleVel.z * zWeight);
}