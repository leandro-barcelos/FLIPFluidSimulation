#define NUM_THREADS 8

#pragma kernel CSMain

// Textures
Texture2D<float4> _ParticlePositionTexture;
Texture2D<float4> _ParticleVelocityTexture;
RWStructuredBuffer<int4> _IntWeight;
RWStructuredBuffer<int4> _IntTempVelocity;
RWTexture3D<float4> _WeightTexture;
RWTexture3D<float4> _TempVelocityTexture;

// Constants
float3 _GridSize;
float3 _GridResolution;
float2 _ParticleResolution;
int3 _Offset;

// Helper functions
float h(float r) {
    return (r >= 0.0 && r <= 1.0) ? (1.0 - r) : ((r >= -1.0 && r <= 0.0) ? (1.0 + r) : 0.0);
}

float k(float3 v) {
    return h(v.x) * h(v.y) * h(v.z);
}

float getScale(float max_value)
{
    int max_int = 2147483647;
    return max_int / max_value;
}

[numthreads(NUM_THREADS, NUM_THREADS, 1)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if ((int)id.x >= _ParticleResolution.x || (int)id.y >= _ParticleResolution.y) return;

    float3 particlePos = _ParticlePositionTexture[id.xy].xyz;
    float3 particleVel = _ParticleVelocityTexture[id.xy].xyz;

    float3 gridPos = (particlePos / _GridSize) * _GridResolution;

    // Compute grid cell and position
    float3 gridCell = floor(gridPos);
    gridCell += _Offset;

    float3 xPosition = gridCell + float3(0.0, 0.5, 0.5);
    float xWeight = k(gridPos - xPosition);

    float3 yPosition = gridCell + float3(0.5, 0.0, 0.5);
    float yWeight = k(gridPos - yPosition);

    float3 zPosition = gridCell + float3(0.5, 0.5, 0.0);
    float zWeight = k(gridPos - zPosition);

    float3 scalarPosition = gridCell + float3(0.5, 0.5, 0.5);
    float scalarWeight = k(gridPos - scalarPosition);

    int index = gridCell.x * _GridResolution.y * _GridResolution.z + gridCell.y * _GridResolution.z + gridCell.z;
    float4 weight = float4(xWeight, yWeight, zWeight, scalarWeight);
    float4 velocity = float4(particleVel, 0.0) * weight;
    float max_value = _ParticleResolution.x * _ParticleResolution.y;
    float scale = getScale(max_value);
    int4 qWeight = round(weight * scale);
    int4 qVelocity = round(velocity * scale);
    InterlockedAdd(_IntTempVelocity[index].x, qVelocity.x);
    InterlockedAdd(_IntTempVelocity[index].y, qVelocity.y);
    InterlockedAdd(_IntTempVelocity[index].z, qVelocity.z);
    InterlockedAdd(_IntWeight[index].r, qWeight.r);
    InterlockedAdd(_IntWeight[index].g, qWeight.g);
    InterlockedAdd(_IntWeight[index].b, qWeight.b);
    InterlockedAdd(_IntWeight[index].a, qWeight.a);
}

#pragma kernel BufferToTexture

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void BufferToTexture(uint3 id : SV_DispatchThreadID){
    if ((int)id.x >= _GridResolution.x || (int)id.g >= _GridResolution.y || (int)id.z >= _GridResolution.z) 
        return;

    int index = id.x * _GridResolution.y * _GridResolution.z + id.y * _GridResolution.z + id.z;

    float max_value = _ParticleResolution.x * _ParticleResolution.y;
    float scale = getScale(max_value);

    _WeightTexture[id] = (float4)(_IntWeight[index] / scale);
    _TempVelocityTexture[id] = (float4)(_IntTempVelocity[index] / scale);
}