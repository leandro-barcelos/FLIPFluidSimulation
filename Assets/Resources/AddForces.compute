#define NUM_THREADS 8

#pragma kernel CSMain

// Textures
Texture3D<float4> _VelocityTexture;
RWTexture3D<float4> _TempVelocityTexture;

// Constants
float3 _InvGridResolution;
float3 _GridSize;
float3 _MouseVelocity;
float3 _MouseRayOrigin;
float3 _MouseRayDirection;
float3 _GridResolution;
float _TimeStep;

// Helper Functions
float kernel(float3 position, float radius)
{
    float3 worldPosition = position * _InvGridResolution * _GridSize;

    float distanceToMouseRay = length(cross(_MouseRayDirection, worldPosition - _MouseRayOrigin));

    float normalizedDistance = max(0.0, distanceToMouseRay / radius);
    return smoothstep(1.0, 0.9, normalizedDistance);
}

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void CSMain(uint3 id : SV_DispatchThreadID) {
    if ((int)id.x >= _GridResolution.x || (int)id.y >= _GridResolution.y || (int)id.z >= _GridResolution.z) return;

    float3 velocity = _VelocityTexture[id.xyz].xyz;

    float3 newVelocity = velocity + float3(0.0, -40.0 * _TimeStep, 0.0);

    float3 xPosition = id + float3(0.0, 0.5, 0.5);
    float3 yPosition = id + float3(0.5, 0.0, 0.5);
    float3 zPosition = id + float3(0.5, 0.5, 0.0);

    float mouseRadius = 5.0;
    float3 kernelValues = float3(kernel(xPosition, mouseRadius), kernel(yPosition, mouseRadius), kernel(zPosition, mouseRadius));

    newVelocity += _MouseVelocity * kernelValues * 3.0 * smoothstep(0.0, 1.0 / 200.0, _TimeStep);
    
    _TempVelocityTexture[id] = float4(newVelocity * 1.0, 0.0);
}
