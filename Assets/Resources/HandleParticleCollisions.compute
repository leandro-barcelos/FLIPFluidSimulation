#define NUM_THREADS 8
#define BINARY_SEARCH_STEPS 5

#pragma enable_d3d11_debug_symbols

// Buffers
RWStructuredBuffer<float3> _ParticlePos;
RWStructuredBuffer<float3> _ParticleVel;
// StructuredBuffer<int> _CellType;
// StructuredBuffer<float> _ObstaclesSDF;

// Parameters
float3 _SimOrigin;
float3 _FDimensions;
float3 _ObstaclePos;
float3 _ObstacleVel;
float _ParticleRadius;
float _CellSpacing;
float _NumParticles;
float _ObstacleRadius;
// float _CellInvSpacing;
// float _TimeStep;

// int ParticleToCell1D(float3 position)
// {
//     int xCell = floor((position.x - _SimOrigin.x) * _CellInvSpacing);
//     int yCell = floor((position.y - _SimOrigin.y) * _CellInvSpacing);
//     int zCell = floor((position.z - _SimOrigin.z) * _CellInvSpacing);

//     xCell = clamp(xCell, 0, _FDimensions.x - 1);
//     yCell = clamp(yCell, 0, _FDimensions.y - 1);
//     zCell = clamp(zCell, 0, _FDimensions.z - 1);

//     return (zCell * _FDimensions.x * _FDimensions.y) + (yCell * _FDimensions.x) + xCell;
// }

// Kernel
#pragma kernel CSMain

[numthreads(NUM_THREADS, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if ((int)id.x >= _NumParticles)
    {
        return;
    }

    int index = id.x;

    float minDist = _ObstacleRadius + _ParticleRadius;
    float minDist2 = minDist * minDist;

    float minX = _SimOrigin.x + _CellSpacing + _ParticleRadius;
    float maxX = _SimOrigin.x + (_FDimensions.x - 1) * _CellSpacing - _ParticleRadius;
    float minY = _SimOrigin.y + _CellSpacing + _ParticleRadius;
    float maxY = _SimOrigin.y + (_FDimensions.y - 1) * _CellSpacing - _ParticleRadius;
    float minZ = _SimOrigin.z + _CellSpacing + _ParticleRadius;
    float maxZ = _SimOrigin.z + (_FDimensions.z - 1) * _CellSpacing - _ParticleRadius;
    
    // int cellIndex = ParticleToCell1D(_ParticlePos[index]);

    // if (_CellType[cellIndex] == 1)
    // {
    //     _ParticlePos[index] -= _ParticleVel[index] * _TimeStep;

    //     float3 start = 0.0;
    //     float3 end = _ParticleVel[index];

    //     for (int j = 0; j < BINARY_SEARCH_STEPS; j++)
    //     {
    //         _ParticleVel[index] = (start + end) * 0.5f;
    //         _ParticlePos[index] += _ParticleVel[index] * _TimeStep;

    //         cellIndex = ParticleToCell1D(_ParticlePos[index]);

    //         if (_CellType[cellIndex] == 1)
    //         {
    //             end = _ParticleVel[index];
    //         }
    //         else
    //         {
    //             start = _ParticleVel[index];
    //         }

    //         _ParticlePos[index] -= _ParticleVel[index] * _TimeStep;
    //     }

    //     if (_CellType[cellIndex] == 1)
    //     {
    //         _ParticlePos[index] += float3(_ObstaclesSDF[cellIndex], _ObstaclesSDF[cellIndex], _ObstaclesSDF[cellIndex]);
    //     }
    // }

    float3 pos = _ParticlePos[index];
    
    float3 d = pos - _ObstaclePos;
    float d2 = dot(d, d);

    if (d2 < minDist2)
    {
        _ParticleVel[index] = _ObstacleVel; 
    }

    if (pos.x < minX)
    {
        pos.x = minX;
        _ParticleVel[index].x = 0.0;
    }
    else if (pos.x > maxX)
    {
        pos.x = maxX;
        _ParticleVel[index].x = 0.0;
    }

    if (pos.y < minY)
    {
        pos.y = minY;
        _ParticleVel[index].y = 0.0;
    }
    else if (pos.y > maxY)
    {
        pos.y = maxY;
        _ParticleVel[index].y = 0.0;
    }

    if (pos.z < minZ)
    {
        pos.z = minZ;
        _ParticleVel[index].z = 0.0;
    }
    else if (pos.z > maxZ)
    {
        pos.z = maxZ;
        _ParticleVel[index].z = 0.0;
    }

    _ParticlePos[index] = pos;
}