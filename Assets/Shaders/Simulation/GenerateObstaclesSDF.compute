#define NUM_THREADS 8
#define LIQUID 0
#define SOLID 1
#define AIR 2

static const float epsilon = 1e-45;
static const float infinity = 99999;

#pragma enable_d3d11_debug_symbols

// Buffers
RWStructuredBuffer<float> _ObstaclesSDF;
RWStructuredBuffer<int> _ClosestTriangles;
RWStructuredBuffer<int> _IntersectionCounts;
RWStructuredBuffer<int> _CellType;
StructuredBuffer<float3> _Vertices;
StructuredBuffer<int> _Triangles;

// Parameters
float4x4 _Transform;
float3 _SimOrigin;
float3 _GridDimensions;
int3 _Direction;
float _CellSpacing;
int _TriangleCount;



// Helper Functions

float3 TransformVertex(int index)
{
    return mul(float4(_Vertices[index], 1.0), _Transform).xyz; 
}

int To1D(int3 idx)
{
    return idx.z * _GridDimensions.x * _GridDimensions.y + idx.y * _GridDimensions.x + idx.x;
}

bool IsValidIndex(int3 idx)
{
    return idx.x >= 0 && idx.y >= 0 && idx.z >= 0 &&
           idx.x < _GridDimensions.x && idx.y < _GridDimensions.y && idx.z < _GridDimensions.z;
}

// float3 CalculateSurfaceNormal(float3 a, float3 b, float3 c)
// {
//     float3 u = b - a;
//     float3 v = c - a;
//     float3 n = cross(u, v);

//     // Handle degenerate cases (zero-length normal)
//     float lengthSquared = dot(n, n);
//     if (lengthSquared < epsilon)
//     {
//         return float3(0, 0, 0); // Return a zero vector
//     }

//     return normalize(n);
// }

// float CalculateDistanceToTriangle(float3 p, float3 v0, float3 v1, float3 v2)
// {
//     float3 v = p - v0;
//     float3 n = CalculateSurfaceNormal(v0, v1, v2);

//     // Handle invalid normals
//     if (all(n == float3(0, 0, 0)))
//     {
//         return infinity; // Large distance for degenerate triangles
//     }

//     // Validate inputs
//     if (any(isnan(v0) || isnan(v1) || isnan(v2) || isnan(p)))
//     {
//         return infinity; // Skip invalid data
//     }

//     return abs(dot(v, n));
// }

bool RaycastTriangle(float3 start, float3 end, float3 a, float3 b, float3 c, out float3 intersection)
{
    intersection = float3(0.0, 0.0, 0.0);
    float3 direction = end - start;
    float3 nDirection = normalize(direction);

    float3 e1 = b - a;
    float3 e2 = c - a;
    float3 normal = cross(nDirection, e2);

    float dotProduct = dot(e1, normal);

    if (dotProduct > -epsilon && dotProduct < epsilon)
    {
        intersection = float3(0.0, 0.0, 0.0);
        return false;
    }

    float invDotProduct = 1.0 / dotProduct;
    float3 toStart = start - a;
    float triangleParam = invDotProduct * dot(toStart, normal);

    if (triangleParam < 0.0 || triangleParam > 1.0)
    {
        intersection = float3(0.0, 0.0, 0.0);
        return false;
    }

    float3 edgeCross = cross(toStart, e1);
    float raycastParam = invDotProduct * dot(nDirection, edgeCross);

    if (raycastParam < 0.0 || triangleParam + raycastParam > 1.0)
    {
        intersection = float3(0.0, 0.0, 0.0);
        return false;
    }

    float distance = invDotProduct * dot(e2, edgeCross);
    if (distance > epsilon && distance < length(direction))
    {
        intersection = start + nDirection * distance;
        return true;
    }

    return false;
}

#pragma kernel Init

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void Init(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= _GridDimensions))
    {
        return;
    }

    int index = id.x + id.y * _GridDimensions.x + id.z * _GridDimensions.x * _GridDimensions.y;

    float3 cellOrigin = _SimOrigin + float3(id) * _CellSpacing;
    float3 p = cellOrigin;
    float3 q = cellOrigin + float3(_CellSpacing, 0, 0);

    _ObstaclesSDF[index] = infinity;
    _ClosestTriangles[index] = -1;
    _IntersectionCounts[index] = 0;
    _CellType[index] = AIR;

    for(int e = 0; e < _TriangleCount; e += 3)
    {
        float3 a = TransformVertex(_Triangles[e]);
        float3 b = TransformVertex(_Triangles[e + 1]);
        float3 c = TransformVertex(_Triangles[e + 2]);

        float3 intersection;
        if (RaycastTriangle(p, q, a, b, c, intersection))
        {
            _IntersectionCounts[index]++;

            float d = distance(p, intersection);
            if (d < _ObstaclesSDF[index])
            {
                _ObstaclesSDF[index] = d;
                _ClosestTriangles[index] = e;
                _CellType[index] = SOLID;
            }
        }
    }  
}

#pragma kernel FastSweeping

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void FastSweeping(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= _GridDimensions))
    {
        return;
    }

    int3 idx = int3(
        _Direction.x > 0 ? id.x : (_GridDimensions.x - 1 - id.x),
        _Direction.y > 0 ? id.y : (_GridDimensions.y - 1 - id.y),
        _Direction.z > 0 ? id.z : (_GridDimensions.z - 1 - id.z)
    );

    int currentIndex = To1D(idx);

    float minDist = _ObstaclesSDF[currentIndex];
    int closestTriangle = _ClosestTriangles[currentIndex];

    float3 p = _SimOrigin + idx * _CellSpacing;

    // Neighbor offsets
    int3 neighborOffsets[6] = {
        int3(-1,  0,  0), int3(1,  0,  0),
        int3( 0, -1,  0), int3(0,  1,  0),
        int3( 0,  0, -1), int3(0,  0,  1)
    };

    for (int n = 0; n < 6; n++)
    {
        int3 neighborIdx = idx + neighborOffsets[n];
        if (!IsValidIndex(neighborIdx))
        {
            continue;
        }

        int neighborIndex = To1D(neighborIdx);
        float dist = _ObstaclesSDF[neighborIndex] + _CellSpacing;
        if (dist < minDist)
        {
            minDist = dist;
            closestTriangle = _ClosestTriangles[neighborIndex] * 3;
        }

        // int e = _ClosestTriangles[neighborIndex] * 3;

        // if (e != -1)
        // {
        //     float3 v0 = TransformVertex(_Triangles[e]);
        //     float3 v1 = TransformVertex(_Triangles[e + 1]);
        //     float3 v2 = TransformVertex(_Triangles[e + 2]);
            
        //     float dist = CalculateDistanceToTriangle(p, v0, v1, v2);
        //     if (dist < minDist)
        //     {
        //         minDist = dist;
        //         closestTriangle = e;
        //     }
        // }
    }

    _ObstaclesSDF[currentIndex] = minDist;
    _ClosestTriangles[currentIndex] = closestTriangle;

}

#pragma kernel CalculateSDFSign

[numthreads(1, NUM_THREADS, NUM_THREADS)]
void CalculateSDFSign(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= _GridDimensions))
    {
        return;
    }

    int c = 0;

    for (int i = 0; i < _GridDimensions.x; i++)
    {
        int index = i + id.y * _GridDimensions.x + id.z * _GridDimensions.x * _GridDimensions.y;

        if ((c & 1) == 1)
        {
            _ObstaclesSDF[index] *= -1;
            _CellType[index] = SOLID; 
        }

        c += _IntersectionCounts[index];
    }
}