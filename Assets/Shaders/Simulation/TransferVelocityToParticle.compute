#define NUM_THREADS 8

#pragma enable_d3d11_debug_symbols

// Textures
Texture3D _GridVel;
SamplerState sampler_GridVel;

// Buffers
StructuredBuffer<float3> _ParticlePos;
RWStructuredBuffer<float3> _ParticleVel;

// Parameters
float3 _ParticleSize;
float3 _GridSize;
float3 _Offset;
float _CellSpacing;

// Kernel
#pragma kernel CSMain

[numthreads(NUM_THREADS, NUM_THREADS, NUM_THREADS)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (any(id >= _ParticleSize))
    {
        return;
    }

    int index = id.x + id.y * _ParticleSize.x + id.z * _ParticleSize.x * _ParticleSize.y;

    float h2 = _CellSpacing * 0.5;

    for (int component = 0; component < 3; component++)
    {
        float dx = component == 0 ? 0.0 : h2;
        float dy = component == 1 ? 0.0 : -h2;
        float dz = component == 2 ? 0.0 : h2;

        float3 particlePos = _ParticlePos[index];
        particlePos += _Offset;
        particlePos += float3(dx, dy, dz);

        float3 cellPos = floor(particlePos / _CellSpacing);
        float3 delta = particlePos - cellPos * _CellSpacing;


        float3 gridSizeMinusOne = _GridSize - 1.0;

        float w1 = 0.0, w2 = 0.0, w3 = 0.0, w4 = 0.0, w5 = 0.0, w6 = 0.0, w7 = 0.0, w8 = 0.0;
        float q1 = 0.0, q2 = 0.0, q3 = 0.0, q4 = 0.0, q5 = 0.0, q6 = 0.0, q7 = 0.0, q8 = 0.0;


        if (all(cellPos >= 0 && cellPos <= gridSizeMinusOne))
        {
            w1 = (1.0 - delta.x / _CellSpacing) * (1.0 - delta.y / _CellSpacing) * (1.0 - delta.z / _CellSpacing);
            q1 = _GridVel.SampleLevel(sampler_GridVel, cellPos / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(0, 0, 1) >= 0 && cellPos + float3(0, 0, 1) <= gridSizeMinusOne))
        {
            w2 = (1.0 - delta.x / _CellSpacing) * (1.0 - delta.y / _CellSpacing) * delta.z / _CellSpacing;
            q2 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(0, 0, 1) / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(0, 1, 0) >= 0 && cellPos + float3(0, 1, 0) <= gridSizeMinusOne))
        {
            w3 = (1.0 - delta.x / _CellSpacing) * delta.y / _CellSpacing * (1.0 - delta.z / _CellSpacing);
            q3 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(0, 1, 0) / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(0, 1, 1) >= 0 && cellPos + float3(0, 1, 1) <= gridSizeMinusOne))
        {
            w4 = (1.0 - delta.x / _CellSpacing) * delta.y / _CellSpacing * delta.z / _CellSpacing;
            q4 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(0, 1, 1) / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(1, 0, 0) >= 0 && cellPos + float3(1, 0, 0) <= gridSizeMinusOne))
        {
            w5 = delta.x / _CellSpacing * (1.0 - delta.y / _CellSpacing) * (1.0 - delta.z / _CellSpacing);
            q5 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(1, 0, 0) / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(1, 0, 1) >= 0 && cellPos + float3(1, 0, 1) <= gridSizeMinusOne))
        {
            w6 = delta.x / _CellSpacing * (1.0 - delta.y / _CellSpacing) * delta.z / _CellSpacing;
            q6 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(1, 0, 1) / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(1, 1, 0) >= 0 && cellPos + float3(1, 1, 0) <= gridSizeMinusOne))
        {
            w7 = delta.x / _CellSpacing * delta.y / _CellSpacing * (1.0 - delta.z / _CellSpacing);
            q7 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(1, 1, 0) / _GridSize, 0)[component];
        }
        if (all(cellPos + float3(1, 1, 1) >= 0 && cellPos + float3(1, 1, 1) <= gridSizeMinusOne))
        {
            w8 = delta.x / _CellSpacing * delta.y / _CellSpacing * delta.z / _CellSpacing;
            q8 = _GridVel.SampleLevel(sampler_GridVel, cellPos + float3(1, 1, 1) / _GridSize, 0)[component];
        }

        _ParticleVel[index][component] = (w1 * q1 + w2 * q2 + w3 * q3 + w4 * q4 + w5 * q5 + w6 * q6 + w7 * q7 + w8 * q8) /
                                         (w1 + w2 + w3 + w4 + w5 + w6 + w7 + w8);
    }
}